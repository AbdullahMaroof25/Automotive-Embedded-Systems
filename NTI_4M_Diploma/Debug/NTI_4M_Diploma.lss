
NTI_4M_Diploma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e9  0080007e  0080007e  00000a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002153  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e49  00000000  00000000  00002ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a8  00000000  00000000  00003d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000950  00000000  00000000  000053e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ae  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a1d  00000000  00000000  00006de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000087ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_1>
   8:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_2>
   c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_3>
  10:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_4>
  14:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_5>
  18:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_6>
  1c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_7>
  20:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_8>
  24:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_9>
  28:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_10>
  2c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_15>
  40:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 92 00 	call	0x124	; 0x124 <main>
  8a:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Create_Buffer>:

void Create_Buffer(void)
{
	u8 i = 0;
	
	for ( i = 0 ; i < BufferSize ; i++)
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	09 c0       	rjmp	.+18     	; 0xa8 <Create_Buffer+0x16>
	{
		Buffer_arr[i] = NULLPTR;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	ee 0f       	add	r30, r30
  9c:	ff 1f       	adc	r31, r31
  9e:	e1 56       	subi	r30, 0x61	; 97
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	11 82       	std	Z+1, r1	; 0x01
  a4:	10 82       	st	Z, r1

void Create_Buffer(void)
{
	u8 i = 0;
	
	for ( i = 0 ; i < BufferSize ; i++)
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	82 33       	cpi	r24, 0x32	; 50
  aa:	a8 f3       	brcs	.-22     	; 0x96 <Create_Buffer+0x4>
	{
		Buffer_arr[i] = NULLPTR;
	}
	
	
}
  ac:	08 95       	ret

000000ae <BufferStatus>:


Buffer_Status BufferStatus(void)
{
	if ( buffer_size == 0 )
  ae:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
  b2:	88 23       	and	r24, r24
  b4:	19 f0       	breq	.+6      	; 0xbc <BufferStatus+0xe>
	{
		return Empty;
	}
	else if( buffer_size == ( BufferSize - 1 ) )
  b6:	81 33       	cpi	r24, 0x31	; 49
  b8:	19 f0       	breq	.+6      	; 0xc0 <BufferStatus+0x12>
	{
		return Full;
	}
		
}
  ba:	08 95       	ret

Buffer_Status BufferStatus(void)
{
	if ( buffer_size == 0 )
	{
		return Empty;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
	}
	else if( buffer_size == ( BufferSize - 1 ) )
	{
		return Full;
  c0:	81 e0       	ldi	r24, 0x01	; 1
	}
		
}
  c2:	08 95       	ret

000000c4 <Add_To_Buffer>:

void Add_To_Buffer(u8 *msg)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
	if ( BufferStatus() != Full	)
  ca:	0e 94 57 00 	call	0xae	; 0xae <BufferStatus>
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	a1 f0       	breq	.+40     	; 0xfa <Add_To_Buffer+0x36>
	{
		Buffer_arr[Add_Index] = *msg;
  d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Add_Index>
  d6:	e8 2f       	mov	r30, r24
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	28 81       	ld	r18, Y
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	e1 56       	subi	r30, 0x61	; 97
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	31 83       	std	Z+1, r19	; 0x01
  e8:	20 83       	st	Z, r18
		Add_Index++;
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Add_Index>
		buffer_size++;
  f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	}
	
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <Get_From_Buffer>:
boolean Get_From_Buffer(u8 *msg)
{
	if ( ( BufferStatus() != Empty ))
 100:	0e 94 57 00 	call	0xae	; 0xae <BufferStatus>
 104:	88 23       	and	r24, r24
 106:	61 f0       	breq	.+24     	; 0x120 <Get_From_Buffer+0x20>
	{
		msg = Buffer_arr[Get_Index];
 108:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Get_Index>
		Get_Index++;
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Get_Index>
		buffer_size--;
 112:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	else
	{
		return FALSE;
	}
	
	return TRUE;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
		Get_Index++;
		buffer_size--;
	}
	else
	{
		return FALSE;
 120:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return TRUE;
}
 122:	08 95       	ret

00000124 <main>:

int main()
{
	//(void) u8 arr[50];
	
	led_init();
 124:	0e 94 ab 00 	call	0x156	; 0x156 <led_init>
	led_off(LED_RED);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
	//lcd_vidInit();
	//lcd_vidGotoRowColumn(0,5);
	//lcd_vidDisplyStr("  UART  ");
	
	comM_init();
 12e:	0e 94 8d 04 	call	0x91a	; 0x91a <comM_init>
	
	EXT_voidInitGlobalInterrupts();
 132:	0e 94 03 02 	call	0x406	; 0x406 <EXT_voidInitGlobalInterrupts>
	
	  Send_Message("AAAAAAAA ");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 9e 04 	call	0x93c	; 0x93c <Send_Message>
      Send_Message("BBBBBBBB ");
 13e:	8a e6       	ldi	r24, 0x6A	; 106
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 9e 04 	call	0x93c	; 0x93c <Send_Message>
    Send_Message("CCCCCCCC ");
 146:	84 e7       	ldi	r24, 0x74	; 116
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9e 04 	call	0x93c	; 0x93c <Send_Message>
    //Send_Message("HHHHHHHH ");
    //Send_Message("IIIIIIII ");
	//Send_Message("JJJJJJJJ ");
	//Send_Message("KKKKKKKK ");
	
    led_on(LED_RED);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 c0 00 	call	0x180	; 0x180 <led_on>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x30>

00000156 <led_init>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                               
*******************************************************************************/
void led_init(void)
{
	dio_vidConfigChannel(RED_LED_PORT, RED_LED_PIN, OUTPUT);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	67 e0       	ldi	r22, 0x07	; 7
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 29 01 	call	0x252	; 0x252 <dio_vidConfigChannel>
	dio_vidConfigChannel(GREEN_LED_PORT, GREEN_LED_PIN, OUTPUT);
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	64 e0       	ldi	r22, 0x04	; 4
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 29 01 	call	0x252	; 0x252 <dio_vidConfigChannel>
	dio_vidConfigChannel(BLUE_LED_PORT, BLUE_LED_PIN, OUTPUT);
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 29 01 	call	0x252	; 0x252 <dio_vidConfigChannel>
	dio_vidConfigChannel(YELLOW_LED_PORT, YELLOW_LED_PIN, OUTPUT);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 29 01 	call	0x252	; 0x252 <dio_vidConfigChannel>
 17e:	08 95       	ret

00000180 <led_on>:
* \Parameters (in) : ledId	-> led id                                                                        
* \Return value:   : None                               
*******************************************************************************/
void led_on(led_id_t ledId)
{
	switch (ledId)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	61 f0       	breq	.+24     	; 0x19c <led_on+0x1c>
 184:	28 f0       	brcs	.+10     	; 0x190 <led_on+0x10>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	79 f0       	breq	.+30     	; 0x1a8 <led_on+0x28>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	99 f0       	breq	.+38     	; 0x1b4 <led_on+0x34>
 18e:	08 95       	ret
	{
		case LED_RED:
			#if (RED_LED_CONNECTION == SOURCE)
				 dio_vidWriteChannel(RED_LED_PORT, RED_LED_PIN, STD_HIGH);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	67 e0       	ldi	r22, 0x07	; 7
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
			#elif (RED_LED_CONNECTION == SINK)
				 dio_vidWriteChannel(RED_LED_PORT, RED_LED_PIN, STD_LOW);
			#else
				#error "You Must Define The LED Connection Type"
			#endif
		break;
 19a:	08 95       	ret
		
		case LED_GREEN:
			#if (GREEN_LED_CONNECTION == SOURCE)
				 dio_vidWriteChannel(GREEN_LED_PORT, GREEN_LED_PIN, STD_HIGH);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	64 e0       	ldi	r22, 0x04	; 4
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
			#elif (GREEN_LED_CONNECTION == SINK)
				 dio_vidWriteChannel(GREEN_LED_PORT, GREEN_LED_PIN, STD_LOW);
			#else
				#error "You Must Define The LED Connection Type"
			#endif
		break;
 1a6:	08 95       	ret
		
		case LED_BLUE:
			#if (BLUE_LED_CONNECTION == SOURCE)
				 dio_vidWriteChannel(BLUE_LED_PORT, BLUE_LED_PIN, STD_HIGH);
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
			#elif (BLUE_LED_CONNECTION == SINK)
				 dio_vidWriteChannel(BLUE_LED_PORT, BLUE_LED_PIN, STD_LOW);
			#else
				#error "You Must Define The LED Connection Type"
			#endif
		break;
 1b2:	08 95       	ret
		
		case LED_YELLOW:
			#if (YELLOW_LED_CONNECTION == SOURCE)
				 dio_vidWriteChannel(YELLOW_LED_PORT, YELLOW_LED_PIN, STD_HIGH);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	66 e0       	ldi	r22, 0x06	; 6
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
 1be:	08 95       	ret

000001c0 <led_off>:
		break;
	}
}
void led_off(led_id_t ledId)
{
	switch (ledId)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	61 f0       	breq	.+24     	; 0x1dc <led_off+0x1c>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <led_off+0x10>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	79 f0       	breq	.+30     	; 0x1e8 <led_off+0x28>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	99 f0       	breq	.+38     	; 0x1f4 <led_off+0x34>
 1ce:	08 95       	ret
	{
		case LED_RED:
		#if (RED_LED_CONNECTION == SOURCE)
		dio_vidWriteChannel(RED_LED_PORT, RED_LED_PIN, STD_LOW);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	67 e0       	ldi	r22, 0x07	; 7
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
		#elif (RED_LED_CONNECTION == SINK)
		dio_vidWriteChannel(RED_LED_PORT, RED_LED_PIN, STD_HIGH);
		#else
		#error "You Must Define The LED Connection Type"
		#endif
		break;
 1da:	08 95       	ret
		
		case LED_GREEN:
		#if (GREEN_LED_CONNECTION == SOURCE)
		dio_vidWriteChannel(GREEN_LED_PORT, GREEN_LED_PIN, STD_LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
		#elif (GREEN_LED_CONNECTION == SINK)
		dio_vidWriteChannel(GREEN_LED_PORT, GREEN_LED_PIN, STD_HIGH);
		#else
		#error "You Must Define The LED Connection Type"
		#endif
		break;
 1e6:	08 95       	ret
		
		case LED_BLUE:
		#if (BLUE_LED_CONNECTION == SOURCE)
		dio_vidWriteChannel(BLUE_LED_PORT, BLUE_LED_PIN, STD_LOW);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
		#elif (BLUE_LED_CONNECTION == SINK)
		dio_vidWriteChannel(BLUE_LED_PORT, BLUE_LED_PIN, STD_HIGH);
		#else
		#error "You Must Define The LED Connection Type"
		#endif
		break;
 1f2:	08 95       	ret
		
		case LED_YELLOW:
		#if (YELLOW_LED_CONNECTION == SOURCE)
		dio_vidWriteChannel(YELLOW_LED_PORT, YELLOW_LED_PIN, STD_LOW);
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 96 01 	call	0x32c	; 0x32c <dio_vidWriteChannel>
 1fe:	08 95       	ret

00000200 <__vector_16>:
	
}


ISR(ADC_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	if (fptr_ADC != NULLPTR)
 222:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <fptr_ADC>
 226:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <fptr_ADC+0x1>
 22a:	30 97       	sbiw	r30, 0x00	; 0
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_16+0x30>
	{
		fptr_ADC();
 22e:	09 95       	icall
	}
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	01 f1       	breq	.+64     	; 0x296 <dio_vidConfigChannel+0x44>
 256:	30 f0       	brcs	.+12     	; 0x264 <dio_vidConfigChannel+0x12>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	b1 f1       	breq	.+108    	; 0x2c8 <dio_vidConfigChannel+0x76>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	09 f4       	brne	.+2      	; 0x262 <dio_vidConfigChannel+0x10>
 260:	4c c0       	rjmp	.+152    	; 0x2fa <dio_vidConfigChannel+0xa8>
 262:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	59 f4       	brne	.+22     	; 0x27e <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 268:	2a b3       	in	r18, 0x1a	; 26
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <dio_vidConfigChannel+0x22>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <dio_vidConfigChannel+0x1e>
 278:	82 2b       	or	r24, r18
 27a:	8a bb       	out	0x1a, r24	; 26
 27c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 27e:	2a b3       	in	r18, 0x1a	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <dio_vidConfigChannel+0x38>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <dio_vidConfigChannel+0x34>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	8a bb       	out	0x1a, r24	; 26
 294:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	59 f4       	brne	.+22     	; 0x2b0 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 29a:	27 b3       	in	r18, 0x17	; 23
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <dio_vidConfigChannel+0x54>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <dio_vidConfigChannel+0x50>
 2aa:	82 2b       	or	r24, r18
 2ac:	87 bb       	out	0x17, r24	; 23
 2ae:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 2b0:	27 b3       	in	r18, 0x17	; 23
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <dio_vidConfigChannel+0x6a>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <dio_vidConfigChannel+0x66>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	87 bb       	out	0x17, r24	; 23
 2c6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	59 f4       	brne	.+22     	; 0x2e2 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 2cc:	24 b3       	in	r18, 0x14	; 20
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <dio_vidConfigChannel+0x86>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <dio_vidConfigChannel+0x82>
 2dc:	82 2b       	or	r24, r18
 2de:	84 bb       	out	0x14, r24	; 20
 2e0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 2e2:	24 b3       	in	r18, 0x14	; 20
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <dio_vidConfigChannel+0x9c>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <dio_vidConfigChannel+0x98>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	84 bb       	out	0x14, r24	; 20
 2f8:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	59 f4       	brne	.+22     	; 0x314 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 2fe:	21 b3       	in	r18, 0x11	; 17
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <dio_vidConfigChannel+0xb8>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <dio_vidConfigChannel+0xb4>
 30e:	82 2b       	or	r24, r18
 310:	81 bb       	out	0x11, r24	; 17
 312:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 314:	21 b3       	in	r18, 0x11	; 17
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <dio_vidConfigChannel+0xce>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <dio_vidConfigChannel+0xca>
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	81 bb       	out	0x11, r24	; 17
 32a:	08 95       	ret

0000032c <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	01 f1       	breq	.+64     	; 0x370 <dio_vidWriteChannel+0x44>
 330:	30 f0       	brcs	.+12     	; 0x33e <dio_vidWriteChannel+0x12>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	b1 f1       	breq	.+108    	; 0x3a2 <dio_vidWriteChannel+0x76>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	09 f4       	brne	.+2      	; 0x33c <dio_vidWriteChannel+0x10>
 33a:	4c c0       	rjmp	.+152    	; 0x3d4 <dio_vidWriteChannel+0xa8>
 33c:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 33e:	41 11       	cpse	r20, r1
 340:	0c c0       	rjmp	.+24     	; 0x35a <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 342:	2b b3       	in	r18, 0x1b	; 27
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <dio_vidWriteChannel+0x22>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <dio_vidWriteChannel+0x1e>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	8b bb       	out	0x1b, r24	; 27
 358:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 35a:	2b b3       	in	r18, 0x1b	; 27
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <dio_vidWriteChannel+0x3a>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <dio_vidWriteChannel+0x36>
 36a:	82 2b       	or	r24, r18
 36c:	8b bb       	out	0x1b, r24	; 27
 36e:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 370:	41 11       	cpse	r20, r1
 372:	0c c0       	rjmp	.+24     	; 0x38c <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 374:	28 b3       	in	r18, 0x18	; 24
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <dio_vidWriteChannel+0x54>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <dio_vidWriteChannel+0x50>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	88 bb       	out	0x18, r24	; 24
 38a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 38c:	28 b3       	in	r18, 0x18	; 24
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <dio_vidWriteChannel+0x6c>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <dio_vidWriteChannel+0x68>
 39c:	82 2b       	or	r24, r18
 39e:	88 bb       	out	0x18, r24	; 24
 3a0:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 3a2:	41 11       	cpse	r20, r1
 3a4:	0c c0       	rjmp	.+24     	; 0x3be <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 3a6:	25 b3       	in	r18, 0x15	; 21
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <dio_vidWriteChannel+0x86>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <dio_vidWriteChannel+0x82>
 3b6:	80 95       	com	r24
 3b8:	82 23       	and	r24, r18
 3ba:	85 bb       	out	0x15, r24	; 21
 3bc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 3be:	25 b3       	in	r18, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dio_vidWriteChannel+0x9e>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <dio_vidWriteChannel+0x9a>
 3ce:	82 2b       	or	r24, r18
 3d0:	85 bb       	out	0x15, r24	; 21
 3d2:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 3d4:	41 11       	cpse	r20, r1
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 3d8:	22 b3       	in	r18, 0x12	; 18
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <dio_vidWriteChannel+0xb8>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <dio_vidWriteChannel+0xb4>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	82 bb       	out	0x12, r24	; 18
 3ee:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 3f0:	22 b3       	in	r18, 0x12	; 18
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <dio_vidWriteChannel+0xd0>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <dio_vidWriteChannel+0xcc>
 400:	82 2b       	or	r24, r18
 402:	82 bb       	out	0x12, r24	; 18
 404:	08 95       	ret

00000406 <EXT_voidInitGlobalInterrupts>:
	{
		case EXT_INT_0:
		Fptr_INT0 = func ;
		break;
		case EXT_INT_1:
		Fptr_INT1 = func ;
 406:	78 94       	sei
 408:	08 95       	ret

0000040a <__vector_1>:
		break;
	}
}

ISR(INT0_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	if (Fptr_INT0!=NULLPTR)
 42c:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Fptr_INT0>
 430:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Fptr_INT0+0x1>
 434:	30 97       	sbiw	r30, 0x00	; 0
 436:	09 f0       	breq	.+2      	; 0x43a <__vector_1+0x30>
	{
		Fptr_INT0();
 438:	09 95       	icall
	}
	
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_2>:
ISR(INT1_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if (Fptr_INT1!=NULLPTR)
 47e:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <Fptr_INT1>
 482:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <Fptr_INT1+0x1>
 486:	30 97       	sbiw	r30, 0x00	; 0
 488:	09 f0       	breq	.+2      	; 0x48c <__vector_2+0x30>
	{
		Fptr_INT1();
 48a:	09 95       	icall
	}
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_3>:
ISR(INT2_vect)
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	//if (Fptr_INT2!=NULLPTR)   to make the program adress points to adress 0 which is reset
	//{
		Fptr_INT2();
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	09 95       	icall
	//}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_11>:
	{
		case Overflow:
		Fptr_T2_OV = func;
		break;
		case CTC:
		Fptr_T2_OC = func;
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
 51a:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <Fptr_T0_OV>
 51e:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <Fptr_T0_OV+0x1>
 522:	30 97       	sbiw	r30, 0x00	; 0
 524:	09 f0       	breq	.+2      	; 0x528 <__vector_11+0x30>
 526:	09 95       	icall
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_10>:
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <Fptr_T0_OC>
 570:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <Fptr_T0_OC+0x1>
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_10+0x30>
 578:	09 95       	icall
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <__vector_6>:
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
 5be:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <Fptr_T1_ICU>
 5c2:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <Fptr_T1_ICU+0x1>
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_6+0x30>
 5ca:	09 95       	icall
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_7>:
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
 610:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Fptr_T1_OCA>
 614:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Fptr_T1_OCA+0x1>
 618:	30 97       	sbiw	r30, 0x00	; 0
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_7+0x30>
 61c:	09 95       	icall
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_8>:
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
 662:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <Fptr_T1_OCB>
 666:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <Fptr_T1_OCB+0x1>
 66a:	30 97       	sbiw	r30, 0x00	; 0
 66c:	09 f0       	breq	.+2      	; 0x670 <__vector_8+0x30>
 66e:	09 95       	icall
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_9>:
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
 6b4:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <Fptr_T1_OV>
 6b8:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <Fptr_T1_OV+0x1>
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_9+0x30>
 6c0:	09 95       	icall
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_5>:
		break;
	}
}

ISR(TIMER2_OVF_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	if (Fptr_T2_OV != NULLPTR)
 706:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <Fptr_T2_OV>
 70a:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <Fptr_T2_OV+0x1>
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_5+0x30>
	{
		Fptr_T2_OV();
 712:	09 95       	icall
	}
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
	if (Fptr_T2_OC != NULLPTR)
 758:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <Fptr_T2_OC>
 75c:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <Fptr_T2_OC+0x1>
 760:	30 97       	sbiw	r30, 0x00	; 0
 762:	09 f0       	breq	.+2      	; 0x766 <__vector_4+0x30>
	{
		Fptr_T2_OC();
 764:	09 95       	icall
	}
 766:	ff 91       	pop	r31
 768:	ef 91       	pop	r30
 76a:	bf 91       	pop	r27
 76c:	af 91       	pop	r26
 76e:	9f 91       	pop	r25
 770:	8f 91       	pop	r24
 772:	7f 91       	pop	r23
 774:	6f 91       	pop	r22
 776:	5f 91       	pop	r21
 778:	4f 91       	pop	r20
 77a:	3f 91       	pop	r19
 77c:	2f 91       	pop	r18
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <UART_Init>:
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
		str++;
	}
}
 788:	90 bd       	out	0x20, r25	; 32
 78a:	89 b9       	out	0x09, r24	; 9
 78c:	8a b1       	in	r24, 0x0a	; 10
 78e:	80 61       	ori	r24, 0x10	; 16
 790:	8a b9       	out	0x0a, r24	; 10
 792:	8a b1       	in	r24, 0x0a	; 10
 794:	88 60       	ori	r24, 0x08	; 8
 796:	8a b9       	out	0x0a, r24	; 10
 798:	80 b5       	in	r24, 0x20	; 32
 79a:	86 6a       	ori	r24, 0xA6	; 166
 79c:	80 bd       	out	0x20, r24	; 32
 79e:	8a b1       	in	r24, 0x0a	; 10
 7a0:	80 68       	ori	r24, 0x80	; 128
 7a2:	8a b9       	out	0x0a, r24	; 10
 7a4:	8a b1       	in	r24, 0x0a	; 10
 7a6:	80 64       	ori	r24, 0x40	; 64
 7a8:	8a b9       	out	0x0a, r24	; 10
 7aa:	08 95       	ret

000007ac <UART_TransmitChr>:
 7ac:	8c b9       	out	0x0c, r24	; 12
 7ae:	08 95       	ret

000007b0 <UART_ReceiveChr>:
 7b0:	8c b1       	in	r24, 0x0c	; 12
 7b2:	08 95       	ret

000007b4 <UART_SetCallBacks>:
#endif


void UART_SetCallBacks(MSG_CLB cpy_CLB,void (*func ) (void))
{
	switch(cpy_CLB)
 7b4:	88 23       	and	r24, r24
 7b6:	19 f0       	breq	.+6      	; 0x7be <UART_SetCallBacks+0xa>
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <UART_SetCallBacks+0x14>
 7bc:	08 95       	ret
	{
		case Tx_CallBack:
		Tx_PTR_CLB = func;
 7be:	70 93 9a 00 	sts	0x009A, r23	; 0x80009a <Tx_PTR_CLB+0x1>
 7c2:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <Tx_PTR_CLB>
		break;
 7c6:	08 95       	ret
		case Rx_CallBack:
		Rx_PTR_CLB = func;
 7c8:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <Rx_PTR_CLB+0x1>
 7cc:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <Rx_PTR_CLB>
 7d0:	08 95       	ret

000007d2 <__vector_15>:
	}
}


ISR(USART_TXC_vect)
{
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
	/*
	*/
	
	if ( Tx_PTR_CLB != NULLPTR)
 7f4:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Tx_PTR_CLB>
 7f8:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <Tx_PTR_CLB+0x1>
 7fc:	30 97       	sbiw	r30, 0x00	; 0
 7fe:	09 f0       	breq	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		Tx_PTR_CLB();
 800:	09 95       	icall
	}
	
	
}
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__vector_13>:

 volatile u8 flag = 0;

ISR (USART_RXC_vect)
{
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	/**/
	if ( Rx_PTR_CLB != NULLPTR)
 846:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <Rx_PTR_CLB>
 84a:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <Rx_PTR_CLB+0x1>
 84e:	30 97       	sbiw	r30, 0x00	; 0
 850:	09 f0       	breq	.+2      	; 0x854 <__vector_13+0x30>
	{
		Rx_PTR_CLB();
 852:	09 95       	icall
	}
	
	
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <Tx_CallBack_Func>:
}

//#if(0)
void Tx_CallBack_Func(void)
{
	tx_index++;
 876:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <tx_index>
 87a:	9f 5f       	subi	r25, 0xFF	; 255
 87c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <tx_index>
	
	if (
	(tx_buffer[tx_index] != '\0') &&
 880:	e9 2f       	mov	r30, r25
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	eb 5c       	subi	r30, 0xCB	; 203
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	80 81       	ld	r24, Z
//#if(0)
void Tx_CallBack_Func(void)
{
	tx_index++;
	
	if (
 88a:	88 23       	and	r24, r24
 88c:	29 f0       	breq	.+10     	; 0x898 <Tx_CallBack_Func+0x22>
	(tx_buffer[tx_index] != '\0') &&
 88e:	92 33       	cpi	r25, 0x32	; 50
 890:	18 f4       	brcc	.+6      	; 0x898 <Tx_CallBack_Func+0x22>
	(tx_index < Tx_MSG_Len)
	)
	{
		UART_TransmitChr(tx_buffer[tx_index]);
 892:	0e 94 d6 03 	call	0x7ac	; 0x7ac <UART_TransmitChr>
 896:	08 95       	ret
	}
	else
	{
		tx_index=0;
 898:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <tx_index>
		
		if ( ( BufferStatus() != Empty ) &&
 89c:	0e 94 57 00 	call	0xae	; 0xae <BufferStatus>
 8a0:	88 23       	and	r24, r24
 8a2:	91 f0       	breq	.+36     	; 0x8c8 <Tx_CallBack_Func+0x52>
			 ( Get_From_Buffer(tx_buffer) == TRUE )
 8a4:	85 e3       	ldi	r24, 0x35	; 53
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	0e 94 80 00 	call	0x100	; 0x100 <Get_From_Buffer>
	}
	else
	{
		tx_index=0;
		
		if ( ( BufferStatus() != Empty ) &&
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	61 f4       	brne	.+24     	; 0x8c8 <Tx_CallBack_Func+0x52>
			 ( Get_From_Buffer(tx_buffer) == TRUE )
		)
		{
			Get_From_Buffer(tx_buffer);
 8b0:	85 e3       	ldi	r24, 0x35	; 53
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	0e 94 80 00 	call	0x100	; 0x100 <Get_From_Buffer>
			UART_TransmitChr(tx_buffer[tx_index]);
 8b8:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <tx_index>
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	eb 5c       	subi	r30, 0xCB	; 203
 8c0:	fe 4f       	sbci	r31, 0xFE	; 254
 8c2:	80 81       	ld	r24, Z
 8c4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <UART_TransmitChr>
 8c8:	08 95       	ret

000008ca <Rx_CallBack_Func>:
}

#endif

void Rx_CallBack_Func(void)
{
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	1f 92       	push	r1
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
	volatile u8 ch;
	ch = UART_ReceiveChr();
 8d4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <UART_ReceiveChr>
 8d8:	89 83       	std	Y+1, r24	; 0x01
	if ( ( ch != '\r' )  &&
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	8d 30       	cpi	r24, 0x0D	; 13
 8de:	71 f0       	breq	.+28     	; 0x8fc <Rx_CallBack_Func+0x32>
	( rx_index < Rx_MSG_Len )
 8e0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <rx_index>

void Rx_CallBack_Func(void)
{
	volatile u8 ch;
	ch = UART_ReceiveChr();
	if ( ( ch != '\r' )  &&
 8e4:	82 33       	cpi	r24, 0x32	; 50
 8e6:	50 f4       	brcc	.+20     	; 0x8fc <Rx_CallBack_Func+0x32>
	( rx_index < Rx_MSG_Len )
	
	)
	{
		rx_buffer[rx_index] = ch;
 8e8:	e8 2f       	mov	r30, r24
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	99 81       	ldd	r25, Y+1	; 0x01
 8ee:	ed 5f       	subi	r30, 0xFD	; 253
 8f0:	fe 4f       	sbci	r31, 0xFE	; 254
 8f2:	90 83       	st	Z, r25
		rx_index++;
 8f4:	8f 5f       	subi	r24, 0xFF	; 255
 8f6:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <rx_index>
 8fa:	0b c0       	rjmp	.+22     	; 0x912 <Rx_CallBack_Func+0x48>
		
		
	}
	else
	{
		rx_buffer[rx_index] = '\0';
 8fc:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <rx_index>
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	ed 5f       	subi	r30, 0xFD	; 253
 904:	fe 4f       	sbci	r31, 0xFE	; 254
 906:	10 82       	st	Z, r1
		rx_index = 0;
 908:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <rx_index>
		Rx_Is_Complete = TRUE;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Rx_Is_Complete>
		
	}
}
 912:	0f 90       	pop	r0
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <comM_init>:
boolean Rx_Start = FALSE;


void comM_init(void)
{
	UART_Init(UART_BAUDRATE_9600);
 91a:	87 e6       	ldi	r24, 0x67	; 103
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 c4 03 	call	0x788	; 0x788 <UART_Init>
	UART_SetCallBacks(Rx_CallBack,Rx_CallBack_Func);
 922:	65 e6       	ldi	r22, 0x65	; 101
 924:	74 e0       	ldi	r23, 0x04	; 4
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	0e 94 da 03 	call	0x7b4	; 0x7b4 <UART_SetCallBacks>
	UART_SetCallBacks(Tx_CallBack,Tx_CallBack_Func);
 92c:	6b e3       	ldi	r22, 0x3B	; 59
 92e:	74 e0       	ldi	r23, 0x04	; 4
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	0e 94 da 03 	call	0x7b4	; 0x7b4 <UART_SetCallBacks>
	Create_Buffer();
 936:	0e 94 49 00 	call	0x92	; 0x92 <Create_Buffer>
 93a:	08 95       	ret

0000093c <Send_Message>:
	}
}


void Send_Message(u8 *Tx_Message )
{
 93c:	bc 01       	movw	r22, r24
	
	for (u8 i = 0 ; i < Tx_MSG_Len ; i++ )
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0b c0       	rjmp	.+22     	; 0x958 <Send_Message+0x1c>
	{
		tx_buffer[i] = Tx_Message[i];
 942:	29 2f       	mov	r18, r25
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	fb 01       	movw	r30, r22
 948:	e2 0f       	add	r30, r18
 94a:	f3 1f       	adc	r31, r19
 94c:	40 81       	ld	r20, Z
 94e:	f9 01       	movw	r30, r18
 950:	eb 5c       	subi	r30, 0xCB	; 203
 952:	fe 4f       	sbci	r31, 0xFE	; 254
 954:	40 83       	st	Z, r20


void Send_Message(u8 *Tx_Message )
{
	
	for (u8 i = 0 ; i < Tx_MSG_Len ; i++ )
 956:	9f 5f       	subi	r25, 0xFF	; 255
 958:	92 33       	cpi	r25, 0x32	; 50
 95a:	98 f3       	brcs	.-26     	; 0x942 <Send_Message+0x6>
	{
		tx_buffer[i] = Tx_Message[i];
	}
	
	Add_To_Buffer(tx_buffer);
 95c:	85 e3       	ldi	r24, 0x35	; 53
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	0e 94 62 00 	call	0xc4	; 0xc4 <Add_To_Buffer>
	
	if ( First_Send == FALSE )
 964:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <First_Send>
 968:	81 11       	cpse	r24, r1
 96a:	07 c0       	rjmp	.+14     	; 0x97a <Send_Message+0x3e>
	{
		UART_TransmitChr(tx_buffer[0]);
 96c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tx_buffer>
 970:	0e 94 d6 03 	call	0x7ac	; 0x7ac <UART_TransmitChr>
		First_Send = TRUE;
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <First_Send>
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
